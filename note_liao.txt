python基础

表示''内部的字符串默认不转义	r''
表示多行内容	'''...'''
空值	None
常量的习惯表示	全部大写的变量名
bytes类型数据	带b前缀的单引号或双引号
文件开头：
	#!/usr/bin/env python3	告诉Linux/OS X系统，这是个python可执行程序，Windows系统会忽略
	#-*- coding: utf-8 -*-	告诉python解释器，按照UTF-8编码读取源代码
格式化字符串：
	1、'%d %f %s %%' % (int,float,str)
	注：%s永远起作用
	2、'{0},{1:.1f}'.format(str,float)
对序列(Iterable)的操作：
	len(Iterable)		返回元素个数
	Iterable[n]		返回第n+1个元素(索引)
	Iterable[-n]		返回倒数第n个元素
对列表(list)的操作：
	list.append(...)	追加元素到末尾
	list.insert(n,...)	在索引号为n的位置插入
	list.pop(n)		删除索引号为n的元素
	list.sort()		对列表进行排序
对集合(set)的操作：
	set.add(key)		添加元素key
	set.remove(key)		删除元素key
对字符串(str)的操作：
	str.replace(s1,s2)	把s1替换成s2
对字典(dict)的操作：
	dict.keys()		所有键
	dict.values()		所有值
	dict.items()		所有键和值
读取用户输入	str1=input(str2)	显示str2，返回str1
生成整数序列	range(n)	[0,1,2,...,n-1]

====================
函数

定义函数时，需要确定函数名和参数个数
如果有必要，可以先对参数的数据类型做检查    isinstance(x,int)
函数执行完毕也没有return语句时，自动return None
函数可以同时返回多个值，但其实就是一个tuple
函数的参数：
	位置参数	enroll(name,gender)
	默认参数	enroll(name,gender,city='Nanjing')
	可变参数	calc(*numbers)
			 1) 0~n个参数
			 2) 组装成tuple
			 3) nums=[1,2,3] -> calc(*nums)
	关键字参数	enroll(name,gender,**kw)
			 1) 0~n个含参数名的参数
			 2) 组装成dict
			 3) enroll(name,gender,city='Nanjing')
			 4) extra={'job':'Engineer'} -> enroll(name,gender,**extra)
	命名关键字参数	enroll(name,gender,*,city='Nanjing',job)
			 1) 如已定义了可变参数，则不需要特殊分隔符*了
			 2) 必须传入参数名
对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的

====================
高级特性

切片	order[::2]
迭代	作用于for循环
	可迭代对象判断：  isinstance(x,Iterable)
列表生成式	[x*x for x in range(1,11) if x%2==0]
		[m+n for m in 'ABC' for n in 'XYZ']
		[k+'='+v for k,v in d.items()]
生成器		a)定义
		  1) g=(x*x for x in range(10))
		  2) 在函数中yield
		b)调用
		  1) next(g)
		  2) for n in g:
		c)generator的return语句返回值在StopIteration的value中：
		  except StopIteration as e:
			print(e.value)
			break
迭代器		迭代器判断：  isinstance(x,Iterator)
		迭代器表示一个惰性计算的序列
		序列可通过iter()函数获得一个Iterator对象

====================
函数式编程

函数名也是变量	abs=10
函数可以接受另一个函数作为参数
map(f,Iterable)		map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回
reduce(f,Iterable)	reduce把结果继续和序列的下一个元素做累积计算，reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
filter(f,Iterable)	filter把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素
sorted(Iterable,key=f，reverse=True)
			sorted对Iterable进行排序，关键在于实现一个映射函数
函数可以作为返回值，返回的函数并没有立刻执行，而是直到调用了f()才执行
返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。
匿名函数：	lambda x,y : x*10+y
装饰器	函数对象有一个__name__属性，可以拿到函数的名字
	装饰器接受一个函数作为参数，并返回一个函数
import functools
def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

@log('execute')
def now():
    pass
同名的now变量指向了新的函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数
偏函数	functools.partial(f,parameter=...)	把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数
	functools.partial(f,*args)		把参数自动加到左边	

====================
模块

__init__.py	每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，用于区分包和普通目录
		可以是空文件，也可以有Python代码
		本身是一个模块，对应的是包这个模块
Python模块的标准文件模板：
1)#!/usr/bin/env python3
2)# -*- coding: utf-8 -*-
3)
4)' a test module '		任何模块代码的第一个字符串都被视为模块的文档注释
5)
6)__author__ = 'name'		把作者写进去
作用域：
__xxx__		特殊变量，可被直接引用，但有特殊用途
_xxx  __xxx	非公开的(private)，不应该被直接引用
安装第三方模块		命令行：pip install 模块名
			https://www.anaconda.com/download/ 基于Python的数据处理和科学计算平台
模块搜索路径存放在sys.path变量中







