如果模块是被导入， __name__ 的值为模块名字
如果模块是被直接执行， __name__ 的值为 '__main__'

引用计数器--循环垃圾收集器
使用局部变量替换模块变量

类实例如果定义了nonzero(__nonzero__())或length（__len__()）且值为0，那么它们的布尔值就是 False。
多个比较操作可以在同一行上进行，求值顺序为从左到右

基本内建数据对象原始类型
  存储模型
    标量/原子类型	数值，字符串
    容器类型		列表，元组，字典
  更新模型
    可变类型		列表，字典
    不可变类型		数字，字符串，元组
  访问模型
    直接访问		数字
    顺序访问		字符串，列表，元组
    映射访问		字典

dir(...)		查看对象的属性
del(...)		删除对象的引用

num.real		复数的实部
num.imag		复数的虚部
num.conjugate()		复数的共轭复数

coerce(n1,n2)		将n1,n2转换为同一类型，以元组返回
divmod(n1,n2)		返回一个包含商和余数的元组
pow(n1,n2,n3)		返回n1**n2 % n3的值，n3可无
round(n1,n2)		对n1四舍五入，n2为可选的小数位数

oct(n)			返回字符串表示的八进制整数
hex(n)			返回字符串表示的十六进制整数
chr(n)			整数转换为ASCII字符(0~255)
ord(s)			ASCII字符转换为整数

enumerate(iter)		返回enumerate对象，可迭代，生成由每个元素index和item组成的元组	
max(iter,key=fn)	fn函数作用后进行比较，返回最大值的原值
reversed(seq)		返回一个以逆序访问的迭代器reversed
sum(seq,init)		返回seq和可选参数init的总和
zip(seq1,seq2)		返回列表，元素为对应seq1,seq2位置元素组成的元组
sorted(seq)		顺序排序seq

string,ascii_uppercase	A~Z
string.ascii_lowercase	a~z
string.ascii_letters	a~zA~Z
string.digits		0~9

str.capitalize()			把字符串的首字母大写
str.center(width)			原字符串居中，用空格填充至长度width
str.ljust(width)			原字符串左对齐，用空格填充至长度width
str.count(s,beg=0,end=len(str))		s在str中出现的次数
str.endswith(s,beg=0,end=len(str))	字符串是否以s结尾
str.find(s,beg=0,end=len(str))		字符串中s第一次出现的位置，不存在则返回-1
str.encode(encoding='utf-8)		以指定格式编码
str.decode(encoding='utf-8)		以指定格式解码
str.join(seq)				以str为分隔符，连接seq中所有元素
str.lstrip()				截掉str左边的空格
str.lower()				所有字符转小写
str.swapcase()				反转大小写
str.partition(s)			切割，返回元组，三个元素，中间是s
str.replace(s1,s2,num=...)		把str中s1替换成s2，次数不超过num
str.split(s,num=...)			以s为分隔符分割str，无参为空格，分成num个字符子串
str.splitlines(num=...)			按行分割str，分成num个字符子串

list.append(obj)			向列表中添加对象obj
list.extend(seq)			把序列seq的内容添加到列表中
list.insert(index,obj)			在index的位置插入对象obj
list.pop(index=-1)			删除并返回指定位置的对象，默认为最后一个对象
list.remove(obj)			从列表中删除对象obj
list.reverse()				原地翻转列表

















