如果模块是被导入， __name__ 的值为模块名字
如果模块是被直接执行， __name__ 的值为 '__main__'

引用计数器--循环垃圾收集器
使用局部变量替换模块变量

类实例如果定义了nonzero(__nonzero__())或length（__len__()）且值为0，那么它们的布尔值就是 False。
多个比较操作可以在同一行上进行，求值顺序为从左到右

基本内建数据对象原始类型
  存储模型
    标量/原子类型	数值，字符串
    容器类型		列表，元组，字典
  更新模型
    可变类型		列表，字典
    不可变类型		数字，字符串，元组
  访问模型
    直接访问		数字
    顺序访问		字符串，列表，元组
    映射访问		字典

dir(...)		查看对象的属性
del(...)		删除对象的引用

num.real		复数的实部
num.imag		复数的虚部
num.conjugate()		复数的共轭复数

coerce(n1,n2)		将n1,n2转换为同一类型，以元组返回
divmod(n1,n2)		返回一个包含商和余数的元组
pow(n1,n2,n3)		返回n1**n2 % n3的值，n3可无
round(n1,n2)		对n1四舍五入，n2为可选的小数位数

oct(n)			返回字符串表示的八进制整数
hex(n)			返回字符串表示的十六进制整数
chr(n)			整数转换为ASCII字符(0~255)
ord(s)			ASCII字符转换为整数

enumerate(iter)		返回enumerate对象，可迭代，生成由每个元素index和item组成的元组	
max(iter,key=fn)	fn函数作用后进行比较，返回最大值的原值
reversed(seq)		返回一个以逆序访问的迭代器reversed
sum(seq,init)		返回seq和可选参数init的总和
zip(seq1,seq2)		返回列表，元素为对应seq1,seq2位置元素组成的元组
sorted(seq)		顺序排序seq

string,ascii_uppercase	A~Z
string.ascii_lowercase	a~z
string.ascii_letters	a~zA~Z
string.digits		0~9

str.capitalize()			把字符串的首字母大写
str.center(width)			原字符串居中，用空格填充至长度width
str.ljust(width)			原字符串左对齐，用空格填充至长度width
str.count(s,beg=0,end=len(str))		s在str中出现的次数
str.endswith(s,beg=0,end=len(str))	字符串是否以s结尾
str.find(s,beg=0,end=len(str))		字符串中s第一次出现的位置，不存在则返回-1
str.encode(encoding='utf-8)		以指定格式编码
str.decode(encoding='utf-8)		以指定格式解码
str.join(seq)				以str为分隔符，连接seq中所有元素
str.lstrip()				截掉str左边的空格
str.lower()				所有字符转小写
str.swapcase()				反转大小写
str.partition(s)			切割，返回元组，三个元素，中间是s
str.replace(s1,s2,num=...)		把str中s1替换成s2，次数不超过num
str.split(s,num=...)			以s为分隔符分割str，无参为空格，分成num个字符子串
str.splitlines(num=...)			按行分割str，分成num个字符子串

list.append(obj)			向列表中添加对象obj
list.extend(seq)			把序列seq的内容添加到列表中
list.insert(index,obj)			在index的位置插入对象obj
list.pop(index=-1)			删除并返回指定位置的对象，默认为最后一个对象
list.remove(obj)			从列表中删除对象obj
list.reverse()				原地翻转列表

dict.fromkeys(seq,n)			创建字典，键为seq对应的值，值为n（默认为None）
d.keys()				返回键的列表
d.values()				返回值的列表
d.items()				返回(键,值)元组的列表
d.clear()				删除字典所有条目
d.pop(key[,default])			删除并返回键为key的条目，键不存在且为定义default则引发异常
print('%(key)s' % d)			在字典中使用字符串格式符
d.copy()				返回字典d的浅拷贝
d.get(key,default=None)			返回键key对应的值，不存在则返回default的值
d.update(dict)				将dict的键值对添加到d上，存在键则覆盖
d.setdafault(key,default)		key存在:返回对应值；key不存在:给键赋默认值并返回该值

set(seq)				创建集合
frozenset(seq)				创建不可变集合
s.add(s1)				给集合添加不可变元素s1
s.update(seq)				给集合添加序列seq，并集方式更新
s.intersection_update(seq)		交集方式更新
s.difference_update(seq)		差集方式更新
s.symmetric_difference_update(seq)	对称差分更新
s.remove(s1)				删除元素s1
s.union(t)				返回s和t的并集
s.intersection(t)			返回s和t的交集
s.difference(t)				返回s-t这个差集
s.symmetric_difference(t)		返回集合，成员是s或t有，但不共有的
s.issubset(t)				s是t的子集则返回True
s.issuperset(t)				s是t的超集则返回True
s.discard(obj)				若obj在s中，则删除obj
s.pop()					删除并返回s中任意一个对象

X if C else Y				三元表达式 C?X:Y
range(start,end,step=1)			生成从start(默认0)到end-1，步幅为step的可迭代对象
xrange(start,end,step=1)		与range类似，返回可迭代对象（不是序列也不是迭代器）

open(str,s)				以s方式打开str文件
file(str,s)				以s方式打开str文件
f.read(size=-1)				从文件f中读取size个字节，返回字符串
f.readline(size=-1)			从文件f中读取下一行的size个字节，返回字符串
f.readlines()				从文件f中读取剩余所有行，返回字符串列表
f.write(str)				把字符串写入文件，返回字节数，不自动换行符
f.writelines(str|list)			把字符串列表写入文件，无返回值，不自动换行符
f.truncate(size=f.tell())		文件截取至size字节处并保存，默认为当前位置
f.seek(off,whence=0)			移动文件指针，从whence处(0:开始,1:当前,2:末尾)偏移off字节
f.tell()				返回当前文件指针的位置（第几个字节）

f.closed				文件是否已关闭
f.encoding				文件使用的编码
f.mode					文件打开时的访问模式
f.name					文件名
f.newlines				行分隔符(未读取到时为None，1种为字符串，多种为列表)

os.linesep				在文件中分隔行的字符串
os.sep					分隔文件路径名的字符串
os.pathsep				分隔文件路径的字符串
os.curdir				当前工作目录的字符串名称
os.pardir				当前工作目录的父目录字符串名称

os.getcwd()				返回当前工作目录
os.chdir(path)				改变当前工作目录
os.listdir(path)			列出指定目录的文件，默认为当前目录
os.mkdir(str)				创建目录
os.rmdir(str)				删除目录
os.rename(s1,s2)			重命名文件，s1→s2

os.path.basename(path)			去掉目录路径，返回文件名
os.path.dirname(path)			去掉文件名，返回目录路径
os.path.join(s1,s2,s3)			将分离的各部分组合成一个路径名（自动添加分隔符）
os.path.split(path)			返回(dirname(),basename())元组	文件名前拆分
os.path.splitdrive(path)		返回(drivename,pathname)元组	盘符后拆分
os.path.splitext(path)			返回(filename,extension)元组	后缀名前拆分
os.path.getatime(path)			返回最近访问时间
os.path.getctime(path)			返回文件创建时间
os.path.getmtime(path)			返回最近文件修改时间
os.path.getsize(path)			返回文件大小（字节）
os.path.exists(path)			路径是否存在
os.path.isabs(path)			是否为绝对路径
os.path.isdir(path)			路径是否存在且为一个目录
os.path.isfile(path)			路径是否存在且为一个文件

关于永久性存储的模块：

pickle		提供python对象的序列化或储存转换功能
marshal

anydbm		提供一个类似字典和文件的对象，可以完成字符串的永久性存储
dbm
gdbm
dbhash
dumbdbm

shelve		提供了python对象的序列化和储存转换，以及类似字典和文件的对象，可以完成python对象的永久性存储

异常处理
try:					可能出现异常的代码块
except (Exception1,Exception2),e:	出现异常时运行
else:					无异常时运行
finally:				无论如何都运行

with context_expr [as var]:		作用于支持上下文管理协议的对象
    with_suite

BaseException				所有异常的基类
SystemExit				python解释器请求退出
KeyboardInterrupt			用户终端执行
Exception				常规错误的基类

sys.exc_info()				返回异常的三元组信息，分别是：异常类，实例，追踪对象

装饰器：

@g				def func(...):
@f(args)	    等价 	    pass
def func(...):			    fenc=g(f(args)(func))
    pass

filter(bool_func,seq)			可被列表解析的if替代
map(func,seq)				可被列表解析的函数替代
reduce(func,seq[,init])			func有两个参数，需from _functools import reduce

from fuctools import partial
partial(func,*args,**kw)		返回固定某参数的偏函数，(位置参数n：f(x)=f(n,x))

局部名字空间是首先被搜索的，存在于其局部作用域

global var	代码块中声明var为全局变量，运行代码块时创建或覆盖

生成器：

y.next()
y.send(...)		函数中(yield ...)返回send的值
y.close()

sys.path		搜索路径
sys.modules		返回当前载入模块的字典，键是模块名，值是对应物理地址

名称空间是名称(标识符)到对象的映射
内建名称空间，全局名称空间，局部名称空间
模块 __builtins__	包含内建名称空间中内建名字的集合
globals()		全局名称空间的字典(名称:值)
locals()		局部名称空间的字典(名称:值)
reload()		重新导入一个已经导入的模块，要求模块是全部且成功导入

推荐所有模块在python模块的开头部分导入，且最好按照以下顺序：
1.python标准库模块
2.python第三方模块
3.应用程序自定义模块
然后使用一个空行分割这三类模块的导入语句

一个模块只被加载一次, 无论它被导入多少次

类名 	大写字母打头
数据	名词
方法	谓词

混合记法(mixedCase)，骆驼记法(camelCase)	updateEmali or update_email

没有实例，类的方法是不能被调用的，但数据可以
文档字符串不能被派生类继承

特殊类属性：
C.__name__			类C的名字（字符串）
C.__doc__			类C的文档字符串
C.__bases__			类C的所有父类构成的元组
C.__dict__			类C的属性和数据值构成的字典
C.__module__			类C定义所在的模块
C.__class__			实例C对应的类

类中静态方法
def foo():		
    pass
foo=staticmethod(foo)		实例也可调用

def foo(cls):			cls指向该类
    pass
foo=classmothod(foo)		实例也可调用

或加装饰器
@staticmethod
@classmethod

class B(A)......
super(B,self).__init__()    等价    A.__init__(self)

A.foo(b)			用实例b调用子类A的方法
C.__mro__			对父类搜索顺序的元组
C.__init__()			生成实例时调用
C.__del__()			删除实例时调用

issubclass(sub,sup)		类sub是否是类sup的子类，sup可以是元组
isinstance(c1,c2)		c1是否是c2或其一个子类的实例,c2可以是元组

hasattr(obj,str)		一个对象是否有一个特定的属性
getattr(obj,str,default)	在你试图读取一个不存在的属性时，引发AttributeError异常，除非给出那个可选的默认参数。
setattr(obj,str)		要么加入一个新的属性，要么取代一个已存在的属性
delattr(obj,str)		从一个对象中删除属性

__slots__			任何试图创建一个其名不在__slots__中的名字的实例属性都将导致AttributeError异常
带__slots__属性的类定义不会存在__dict__了

operator模块
add,sub,mul,div			加减乘除

类中定义 __call__(self) 函数，使实例可以被调用，调用参数传至__call__中

os.system(str)			接收字符串形式的系统命令并执行它，返回0表示成功
os.popen(str)			与system类似，但返回一个类文件对象

sys.exit(status=0)		立即退出程序，返回status的值

正则表达式

|		或
.		匹配任何字符（换行符除外）
^ or \A		匹配字符串开始
$ or \Z		匹配字符串结尾
*		匹配前面出现的正则表达式 零次或多次
+		匹配前面出现的正则表达式 一次或多次
?		匹配前面出现的正则表达式 零次或一次
{n}		匹配前面出现的正则表达式 n次
{m,n}		匹配前面出现的正则表达式 m次~n次
[...]		匹配字符组里出现的任意一个字符
[x-y]		匹配从字符x到y中的任意一个字符
[^...]		不匹配此字符集中的任何一个字符
(*+?{})?	括号中四种的非贪婪版本
\d		匹配任何数字  \D是其反义
\w		匹配任何数字字母字符  \W是其反义
\s		匹配任何空白字符[\n\t\r\v\f]  \S是其反义
\b		匹配单词边界  \B是其反义
(...)		子组

re模块函数
compile(pattern,flags=0)	返回pattern对应的regex对象，大多数re模块函数都可以作为regex对象的方法
match(pattern,string,flags=0)	在字符串string起始处查找正则表达式模式pattern的第一次出现，返回匹配对象
search(pattern,string,flags=0)	在字符串string中查找正则表达式模式pattern的第一次出现，返回匹配对象
findall(pattern,string[,flags])	在字符串string中查找正则表达式模式pattern的所有出现，返回列表
split(pattern,string,max=0)	根据pattern分割string，可根据正则表达式
sub(pattern,repl,string,max=0)	把string中的pattern替换成repl
subn(...)			同sub，但它还返回一个表示替换次数的数字，最终返回一个元组

匹配对象.group(n=0)		返回匹配的结果，返回第n个子组
匹配对象.groups()		返回包含表达式子组的元组，没有子组则为空元组

655




















