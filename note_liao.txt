python基础

表示''内部的字符串默认不转义	r''
表示多行内容	'''...'''
空值	None
常量的习惯表示	全部大写的变量名
bytes类型数据	带b前缀的单引号或双引号
文件开头：
	#!/usr/bin/env python3	告诉Linux/OS X系统，这是个python可执行程序，Windows系统会忽略
	#-*- coding: utf-8 -*-	告诉python解释器，按照UTF-8编码读取源代码
格式化字符串：
	1、'%d %f %s %%' % (int,float,str)
	注：%s永远起作用
	2、'{0},{1:.1f}'.format(str,float)
对序列(Iterable)的操作：
	len(Iterable)		返回元素个数
	Iterable[n]		返回第n+1个元素(索引)
	Iterable[-n]		返回倒数第n个元素
对列表(list)的操作：
	list.append(...)	追加元素到末尾
	list.insert(n,...)	在索引号为n的位置插入
	list.pop(n)		删除索引号为n的元素
	list.sort()		对列表进行排序
对集合(set)的操作：
	set.add(key)		添加元素key
	set.remove(key)		删除元素key
对字符串(str)的操作：
	str.replace(s1,s2)	把s1替换成s2
对字典(dict)的操作：
	dict.keys()		所有键
	dict.values()		所有值
	dict.items()		所有键和值
读取用户输入	str1=input(str2)	显示str2，返回str1
生成整数序列	range(n)	[0,1,2,...,n-1]

====================
函数

定义函数时，需要确定函数名和参数个数
如果有必要，可以先对参数的数据类型做检查    isinstance(x,int)
函数执行完毕也没有return语句时，自动return None
函数可以同时返回多个值，但其实就是一个tuple
函数的参数：
	位置参数	enroll(name,gender)
	默认参数	enroll(name,gender,city='Nanjing')
	可变参数	calc(*numbers)
			 1) 0~n个参数
			 2) 组装成tuple
			 3) nums=[1,2,3] -> calc(*nums)
	关键字参数	enroll(name,gender,**kw)
			 1) 0~n个含参数名的参数
			 2) 组装成dict
			 3) enroll(name,gender,city='Nanjing')
			 4) extra={'job':'Engineer'} -> enroll(name,gender,**extra)
	命名关键字参数	enroll(name,gender,*,city='Nanjing',job)
			 1) 如已定义了可变参数，则不需要特殊分隔符*了
			 2) 必须传入参数名
对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的

====================
高级特性

切片	order[::2]
迭代	作用于for循环
	可迭代对象判断：  isinstance(x,Iterable)
列表生成式	[x*x for x in range(1,11) if x%2==0]
		[m+n for m in 'ABC' for n in 'XYZ']
		[k+'='+v for k,v in d.items()]
生成器		a)定义
		  1) g=(x*x for x in range(10))
		  2) 在函数中yield
		b)调用
		  1) next(g)
		  2) for n in g:
		c)generator的return语句返回值在StopIteration的value中：
		  except StopIteration as e:
			print(e.value)
			break
迭代器		迭代器判断：  isinstance(x,Iterator)
		迭代器表示一个惰性计算的序列
		序列可通过iter()函数获得一个Iterator对象

====================
函数式编程

函数名也是变量	abs=10
函数可以接受另一个函数作为参数
map(f,Iterable)		map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回
reduce(f,Iterable)	reduce把结果继续和序列的下一个元素做累积计算，reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)
filter(f,Iterable)	filter把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素
sorted(Iterable,key=f，reverse=True)
			sorted对Iterable进行排序，关键在于实现一个映射函数
函数可以作为返回值，返回的函数并没有立刻执行，而是直到调用了f()才执行
返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。
匿名函数：	lambda x,y : x*10+y
装饰器	函数对象有一个__name__属性，可以拿到函数的名字
	装饰器接受一个函数作为参数，并返回一个函数
import functools
def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

@log('execute')
def now():
    pass
同名的now变量指向了新的函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数
偏函数	functools.partial(f,parameter=...)	把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数
	functools.partial(f,*args)		把参数自动加到左边	

====================
模块

__init__.py	每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，用于区分包和普通目录
		可以是空文件，也可以有Python代码
		本身是一个模块，对应的是包这个模块
Python模块的标准文件模板：
1)#!/usr/bin/env python3
2)# -*- coding: utf-8 -*-
3)
4)' a test module '		任何模块代码的第一个字符串都被视为模块的文档注释
5)
6)__author__ = 'name'		把作者写进去
作用域：
__xxx__		特殊变量，可被直接引用，但有特殊用途
_xxx		“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”
__xxx		私有的(private)，不应该被直接引用
安装第三方模块		命令行：pip install 模块名
			https://www.anaconda.com/download/ 基于Python的数据处理和科学计算平台
模块搜索路径存放在sys.path变量中

====================
面向对象编程

class Student(object):			Student是类名,object是父类
    def __init__(self,name,score):	构造方法
        self.__name = name		类中定义的函数的第一个参数永远是self，self指向创建的实例本身
        self.__score = score		Python解释器对外把__score变量改成了_Student__score			
和静态语言不同，Python可以自由地给一个实例变量绑定任何数据	bart.name='Sam'
当我们定义一个class的时候，我们实际上就定义了一种数据类型
动态语言的“鸭子类型”：	看起来像鸭子，走起路来像鸭子，那它就可以被看做是鸭子
type(...)	判断对象类型，返回对应的Class类型
判断对象是否是函数	type(fn)==types.FunctionType
总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”
dir(...)	获得一个对象的所有属性和方法，返回list
在len(...)函数内部，它自动去调用该对象的__len__()方法，自己写的类，如果也想用len(...)的话，就自己写一个__len__()方法
hasattr(obj,'x')	obj对象有属性x吗
setattr(obj,'x',n)	obj对象的x属性设置为n
getattr(obj,'x',404)	获取obj对象的x属性，如不存在则返回默认值404
以上三个函数也可以作用于对象的方法

====================
面向对象高级编程

from types import MethodType
s.set_age = MethodType(set_age, s)	给实例s绑定一个set_age方法
__slots__=('...','...')		限制该class实例能添加的属性，对继承的子类不起作用
    
    @property				把getter方法变成属性
    def birth(self):
        return self._birth

    @birth.setter			property本身创建了另一个装饰器birth.setter
    def birth(self, value):		把setter方法变成属性赋值
        self._birth = value

    @property				只读属性，没定义getter方法
    def age(self):
        return 2015 - self._birth
在设计类的继承关系时，通常，主线都是单一继承下来的
创建MixIn类，通过多重继承来组合多个MixIn的功能
__str__()	设计打印实例时打印的内容，返回用户看到的字符串
__repr__()	直接显示变量时调用，返回程序开发者看到的字符串
__iter__()	返回一个迭代对象(可是自己)，然后，Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值
__getattr__()	没有找到属性的情况下，才调用来查找，设计返回值
__call__()	设计如何对实例进行调用
callable(...)	判断对象能否被调用
枚举类		Enum(...,(...,...))
		class ...(Enum): ...=...
		类名.成员名称.value  枚举常量
class的类型是type
要创建一个class对象，type()函数依次传入3个参数：
1、class的名称；
2、继承的父类集合
3、class的方法名称与函数绑定 dict(...=...)

====================
异常

所有的错误类型都继承自BaseException
try:
except ... as ... :
except ... as ... :
else:
finally:
出错的时候，一定要分析错误的调用栈信息，才能定位错误的位置
logging.exception(e)	同样是出错，但程序打印完错误信息后会继续执行，并正常退出
可以定义一个错误的class，选择好继承关系，然后，用raise语句抛出一个错误的实例
raise语句如果不带参数，就会把当前错误原样抛出
在except中raise一个Error，还可以把一种类型的错误转化成另一种类型
断言(assert)	assert n!=0 , 'n is zero!'
		表达式n != 0应该是True
		如果断言失败，assert语句本身就会抛出AssertionError: n is zero!
python -O err.py	用-O参数来关闭assert,把所有的assert语句当成pass来看
logging		import logging
		logging.basicConfig(level=logging.INFO)	指定信息记录级别:debug,info,warning,error 后面的级别可以屏蔽左面的级别
pdb		python -m pdb err.py	命令行调试
pdb.set_trace()	运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境
单元测试	class ...(unittest.TestCase):		编写一个测试类，从unittest.TestCase继承
		  def test_...(self):			以test开头的方法就是测试方法
		    ...
		  def setUp(self):			在调用一个测试方法前被执行
		    ...
		  def tearDown(self):			在调用一个测试方法后被执行
		    ...
单元测试通过了并不意味着程序就没有bug了，但是不通过程序肯定有bug

====================
IO编程

同步IO vs 异步IO	是否等待IO执行的结果
open(file_name,s)	打开一个文件对象，传入文件名和标识符
'r','rb','w','wb','a'	标识符种类：读，读二进制，写，写二进制,追加
open可传参数		encoding	编码
			errors		非法编码字符的处理(常用ignore)
read()			一次读取文件的全部内容
read(size)		每次最多读取size个字节的内容
readline()		每次读取一行内容
readlines()		一次读取所有内容并按行返回list
close()			关闭文件，避免占用操作系统的资源
with open(...) as f:	不必调用f.close()方法，代码更佳简洁
StringIO	\/	write()		写入str
BytesIO		/\	getvalue()	获取写入后的str
os
  name			操作系统类型 posix-Linux,Unix,Mac OS X | nt-Windows
  environ.get(...)	获取某个环境变量的值 		
  path.abspath('.')	查看当前目录的绝对路径
  path.split(...)	拆分路径，后一部分是最后级别目录或文件名
  path.splittext(...)	拆分路径，后一部分是文件扩展名
  path.isfile(...)	判断是否是文件
  path.isdir(...)	判断是否是目录
  listdir('.')		列出所有文件和目录
  rename(x,y)		对文件重命名
  remove(...)		删除文件
序列化
  pickle.dumps(d)	把任意对象序列化成一个bytes
  pickle.dump(d,f)	直接把对象序列化后写入一个file-like Object
  pickle.load(f)	从一个file-like Object中直接反序列化出对象 
  json.dumps(d)		把Python对象变成一个JSON，返回一个str
  json.dump(d,f)	直接把JSON写入一个file-like Object
  json.loads(s)		把JSON的字符串反序列化
  json.load(f)		从file-like Object中读取字符串并反序列化

====================
正则表达式

基础知识
  \d	一个数字
  \w	一个字母或数字
  .	任意字符
  *	任意个字符（包括0个）
  +	至少一个字符
  ？	0个或1个字符
  {n}	n个字符
  {n,m}	n~m个字符
  []	范围内的一个
  |	或
  ^	行的开头
  $	行的结束
re.match(r'正则表达式',test)	匹配成功，返回一个Match对象，否则返回None

====================
常用内置模块

datetime
  datetime
      datetime.now()			返回当前日期和时间，类型是datetime
      datetime(...)			创建指定日期时间的datetime
      dt.timestamp()			把datetime转换为timestamp
      datetime.fromtimestamp(...)	把timestamp转换为datetime（前加utc - 直接转换到UTC标准时区的时间）
      datetime.strptime(s,fs)		把str转换为datetime，无时区信息
					需要日期时间格式化字符串 %Y-年 %m-月 %d-日 %H-时 %M-分 %S-秒
      dt.strftime			把datetime转换为str
  timedelta
      timedelta(...)			格式化日期时间，使其能直接+-于datetime
					参数:days,hours,minutes,weeks,seconds
collections
  namedtuple
      namedtuple(s,[list])		创建自定义tuple对象，名为s，元素名列在list里
  deque
      deque(Iterable)			高效实现插入和删除操作的双向列表，适合用于队列和栈
					append(),pop(),appendleft(),popleft()
  defaultdict
      defaultdict(lambda :'N/A')	此dick引用的key不存在时，调用函数返回默认值
  OrderedDict
      OrderedDict(...)			此dick的key按照插入的顺序排列
  Counter
      Counter()				dict的子类，key是字符，value是数字
hashlib
  hashlib.md5()/hashlib.sha1()		两种摘要算法生成对象
  hl.update(s.encode('utf-8'))		文本编码后追加输入对象
  hl.hexdigest()			计算摘要
hmac
  hmac.new(key,msg,digestmod='MD5')	Hmac算法生成对象，针对所有哈希算法都通用
  h.update(...)				追加内容
  h.hexdigest()				计算摘要
itertools
  itertools.count(n)			数值+1，无参为起始0
  itertools.repeat(s,n)			重复，无第二参数为无限重复次数
  itertools.takewhile(fn,l)		根据函数判断来截取出有限序列
  itertools.chain(a,b)			把迭代对象串联起来
  itertools.groupby(list,fn)		把迭代器中相邻的重复元素挑出来放在一起
					返回值两个：key,group
					fn可选，作用于挑选规则
urllib
with request.urlopen(url) as f:		对url进行抓取，并返回响应
    data=f.read()			读取响应内容
    print(data.decode('utf-8'))		内容解码

模拟iPhone 6去请求网页
req=request.Request('http://www.douban.com/')
req.add_header('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25')
with request.urlopen(req) as f:
    ...

contextlib
XML
HTMLParser

====================
常用第三方模块

pillow

from PIL import Image,ImageFilter	导入包
Image.open(name)			打开图像对象
im.size					图像对象的大小属性，元组(w,h)
im.save(name,extension)			保存图像
im.filter(ImageFilter.BLUR)		图像模糊效果

requests

import requests				导入包
requests.get(url,params=dict)		get访问页面，可加参数
r.encoding				查看编码(自动检测)

chardet

import chardet				导入包
chardet.detect(bytes)			检测编码，confidence-概率

psutil

import psutil				导入包
psutil.cpu_count()			CPU逻辑数量（参数False则为物理核心）
psutil.cpu_times()			统计CPU 用户/系统/空闲 时间
psutil.virtual_memory()			获取物理内存信息
psutil.swap_memory()			获取交换内存信息
psutil.disk_partitions()		磁盘分区信息
psutil.disk_usage('/')			磁盘使用情况
psutil.disk_io_counters()		磁盘IO
psutil.net_if_addrs()			获取网络接口信息
psutil.net_if_stats()			获取网络接口状态
psutil.net_connections()		获取当前网络连接信息
psutil.pids()				所有进程ID
psutil.Process(id)			获取指定进程
p.name()				进程名称
p.exe()					进程exe路径
p.cwd()					进程工作目录
p.cmdline()				进程启动的命令行
p.ppid()				父进程ID
p.parent()				父进程
p.children()				子进程列表
p.status()				进程状态
p.username()				进程用户名
p.create_time()				进程创建时间
p.terminal()				进程终端
p.cpu_times()				进程使用的CPU时间
p.memory_info()				进程使用的内存
p.open_files()				进程打开的文件
p.connections()				进程相关网络连接
p.num_threads()				进程的线程数量
p.threads()				所有线程信息
p.environ()				进程环境变量
p.terminate()				结束进程

====================
图形界面

模块：tkinter
图形库：Tk
使用注意：
	类从Frame继承
	Laabel(self,text=str)			Label组件
	Button(self,text=str,command=fn)	Button组件
	Entry(self)				输入框组件
	widget.pack()				把widget加入到父容器并实现布局，是最简单的布局
	self.quit()				退出程序
	W_name.master.title(str)		窗口标题
	W_name.mainloop()			主消息循环
	tkinter.messagebox.showinfo(str)	弹出消息对话框







